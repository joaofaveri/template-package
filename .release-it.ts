import type { Config } from 'release-it'

import { execSync } from 'child_process'
import fs from 'fs'
const footerCustomTemplate = fs
  .readFileSync('./templates/changelog-footer.hbs')
  .toString()
const headerCustomTemplate = fs
  .readFileSync('./templates/changelog-header.hbs')
  .toString()
const commitCustomTemplate = fs
  .readFileSync('./templates/changelog-commit.hbs')
  .toString()
const mainCustomTemplate = fs
  .readFileSync('./templates/changelog-main.hbs')
  .toString()

const rawContributors = execSync(
  "git log --format='%ae' $(git describe --tags --abbrev=0)..HEAD | sort | uniq"
)
  .toString()
  .trim()
  .split('\n')

// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
const fetchGitHubUsername = async (email: string) => {
  try {
    const response = await fetch(
      `https://api.github.com/search/users?q=${email}+in:email`,
      {
        headers: { Authorization: `token ${process.env.GITHUB_TOKEN}` }
      }
    )

    if (response.ok) {
      const json = await response.json()
      console.log(json)
      return `@${json.items[0].login}`
    }
    return email
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  } catch (error) {
    return email
  }
}

const getContributors = async () => {
  const usernames = await Promise.all(rawContributors.map(fetchGitHubUsername))
  console.log(usernames.join(', '))
}

export default {
  git: {
    requireCleanWorkingDir: true,
    commitMessage:
      'chore(release): :bookmark: new release - v${version} [generated by release-it]',
    commitArgs: ['-n', '-v', '-S'],
    tagArgs: ['-s'],
    requireCommits: true,
    requireBranch: 'main'
  },
  github: {
    release: true,
    releaseName: 'v${version}',
    comments: {
      submit: false,
      issue:
        ':rocket: _This issue has been resolved in v${version}. See [${releaseName}](${releaseUrl}) for release notes._',
      pr: ':rocket: _This pull request is included in v${version}. See [${releaseName}](${releaseUrl}) for release notes._'
    }
  },
  npm: {
    publish: true
  },
  plugins: {
    '@release-it/conventional-changelog': {
      infile: 'CHANGELOG.md',
      header:
        '# :tada: Changelog\n\nAll notable changes to this project will be documented in this file. This project follows the [Conventional Commits](https://www.conventionalcommits.org) specification and adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html). This file is automatically generated using [`release-it`](https://github.com/release-it/release-it) and [`conventional-changelog`](https://github.com/release-it/conventional-changelog) plugin.',
      context: {
        contributors: getContributors
      },
      writerOpts: {
        mainTemplate: mainCustomTemplate,
        headerPartial: headerCustomTemplate,
        commitPartial: commitCustomTemplate,
        footerPartial: footerCustomTemplate
      },
      parserOpts: {
        noteKeywords: ['BREAKING CHANGE', 'BREAKING CHANGES']
      },
      preset: {
        name: 'conventionalcommits',
        types: [
          {
            type: 'feat',
            section: ':sparkles: Features',
            hidden: false
          },
          {
            type: 'fix',
            section: ':lady_beetle: Bug Fixes',
            hidden: false
          },
          {
            type: 'refactor',
            section: ':adhesive_bandage: Other changes',
            hidden: false
          },
          {
            type: 'chore',
            section: ':adhesive_bandage: Other changes',
            hidden: false
          },
          {
            type: 'build',
            section: ':adhesive_bandage: Other changes',
            hidden: false
          },
          {
            type: 'docs',
            section: ':blue_book: Documentation',
            hidden: false
          },
          {
            type: 'style',
            section: ':art: Visual Changes',
            hidden: false
          },
          {
            type: 'perf',
            section: ':zap: Performance Improvements',
            hidden: false
          },
          {
            type: 'test',
            section: ':zap: Performance Improvements',
            hidden: false
          },
          {
            type: 'ci',
            section: ':zap: Performance Improvements',
            hidden: false
          },
          {
            type: 'revert',
            section: ':zap: Performance Improvements',
            hidden: false
          }
        ]
      }
    }
  }
} satisfies Config
